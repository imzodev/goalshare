name: Perform a code review when a pull request is created.

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  codex:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      final_message: ${{ steps.run_codex.outputs.final-message }}
    steps:
      - uses: actions/checkout@v5
        with:
          # Explicitly check out the PR's merge commit.
          ref: refs/pull/${{ github.event.pull_request.number }}/merge

      - name: Pre-fetch base and head refs for the PR
        run: |
          git fetch --no-tags origin \
            ${{ github.event.pull_request.base.ref }} \
            +refs/pull/${{ github.event.pull_request.number }}/head

      # If you want Codex to build and run code, install any dependencies that
      # need to be downloaded before the "Run Codex" step because Codex's
      # default sandbox disables network access.

      - name: Run Codex
        id: run_codex
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          safety-strategy: read-only
          read-only: true
          model: gpt-5-nano
          prompt: |
            Eres un asistente experto en revisiones de c√≥digo. Est√°s revisando el PR #${{ github.event.pull_request.number }} del repositorio ${{ github.repository }}.
            Base SHA: ${{ github.event.pull_request.base.sha }}
            Head SHA: ${{ github.event.pull_request.head.sha }}

            Instrucciones IMPORTANTES:
            - Responde 100% en espa√±ol y en formato Markdown.
            - Utiliza emojis para representar estados y acciones.
            - Utiliza headers #, ##, ### para distinguir cada secci√≥n.
            - Utiliza --- para dividir secciones.
            - Utiliza tablas cuando sea necesario para mostrar datos tabulares.
            - Analiza SOLAMENTE los cambios del PR (diff entre base y head).
            - Estructura la respuesta EXACTAMENTE con los siguientes encabezados y formato. Si alg√∫n dato no puede determinarse con certeza, usa "N/A" y contin√∫a.
            - S√© espec√≠fico, conciso, accionable; incluye fragmentos de c√≥digo solo cuando agreguen valor.

            Plantilla de salida obligatoria:
            
            Code Review: PR #${{ github.event.pull_request.number }}
            
            üìä Resumen General
            - Archivos modificados: <cuenta> (+<l√≠neas_agregadas>/-<l√≠neas_eliminadas>)
            - Commits: <cuenta> (menciona si siguen conventional commits)
            - Estado: <Mergeable|N/A>
            
            ‚úÖ Aspectos Positivos
            1. <hallazgo positivo 1 con breve explicaci√≥n y ejemplo si aplica>
            2. <hallazgo positivo 2>
            3. <hallazgo positivo 3>
            
            ‚ö†Ô∏è Observaciones y Sugerencias
            1. <problema o mejora 1>
               - Sugerencia: <acci√≥n concreta>
               - Ejemplo (si aplica):
                 ```ts
                 // ejemplo
                 ```
            2. <problema o mejora 2>
            3. <problema o mejora 3>
            
            üîç Archivos Clave Revisados
            - <ruta/archivo1>: <breve nota>
            - <ruta/archivo2>: <breve nota>
            - <ruta/archivo3>: <breve nota>
            
            üéØ Recomendaciones Finales
            - Antes de Merge: <lista corta de acciones>
            - Post-Merge: <lista corta de acciones>
            
            üìù Veredicto
            <"‚úÖ Aprobado", "‚úÖ Aprobado con sugerencias menores" o "‚ùå Cambios requeridos"> ‚Äî <breve justificaci√≥n>
            
            Metodolog√≠a sugerida para obtener datos (si es posible en el entorno):
            - Recuento de archivos y l√≠neas: `git diff --shortstat $BASE $HEAD`
            - Lista de archivos: `git diff --name-only $BASE $HEAD`
            - Commits: `git log --oneline $BASE..$HEAD`

            Contexto del PR:
            T√≠tulo: ${{ github.event.pull_request.title }}
            Body: ${{ github.event.pull_request.body }}

  post_feedback:
    runs-on: ubuntu-latest
    needs: codex
    if: needs.codex.outputs.final_message != ''
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Report Codex feedback
        uses: actions/github-script@v7
        env:
          CODEX_FINAL_MESSAGE: ${{ needs.codex.outputs.final_message }}
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: process.env.CODEX_FINAL_MESSAGE,
            });
